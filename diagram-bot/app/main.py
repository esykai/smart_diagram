import logging
import time

import aiohttp
import os
import uuid

from typing import List, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, InputMediaPhoto
from logging_config import setup_logging

setup_logging()

logger = logging.getLogger("aiogram")
TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
API_URL = os.getenv("API_URL")

bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher()


async def send_process_message(message: types.Message) -> types.Message:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    return await message.reply("‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ... ")


async def generate_flowchart(session: aiohttp.ClientSession, algorithm: str, step: int) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫-—Å—Ö–µ–º—É –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —à–∞–≥–µ.

    :param session: –°–µ—Å—Å–∏—è aiohttp.
    :param algorithm: –ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã.
    :param step: –®–∞–≥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã.
    :return: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ö–µ–º—ã, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None.
    """
    unique_filename = f"flowchart_{uuid.uuid4().hex}.jpg"
    logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è - —à–∞–≥ {step}")

    try:
        async with session.get(API_URL, params={"algorithm": f"{algorithm}"}) as response:
            if response.status == 200:
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è - —à–∞–≥ {step}")
                with open(unique_filename, "wb") as file:
                    file.write(await response.read())
                return unique_filename
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200
                error_text = await response.text()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è - —à–∞–≥ {step}. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text}")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.exception(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è - —à–∞–≥ {step}: {str(e)}")

    return None


async def send_flowcharts(message: types.Message, temp_files: list[str]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫-—Å—Ö–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param temp_files: –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    media_group = [
        InputMediaPhoto(media=FSInputFile(file), caption=f"üéâ –ë–ª–æ–∫-—Å—Ö–µ–º–∞ {i + 1}")
        for i, file in enumerate(temp_files) if os.path.exists(file)
    ]
    if media_group:
        await message.reply_media_group(media_group)


async def delete_temp_files(temp_files: List[str]) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

    :param temp_files: –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    for file in temp_files:
        if file and os.path.exists(file):
            os.remove(file)


last_request_time = {}


@dp.message(F.text.startswith("/block"))
async def generate_block(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /block –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫-—Å—Ö–µ–º—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    current_time = time.time()

    if user_id in last_request_time and current_time - last_request_time[user_id] < 5:
        await message.reply("‚ùó –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return

    last_request_time[user_id] = time.time()

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/block –≤–∞—à_–∞–ª–≥–æ—Ä–∏—Ç–º")
        return

    algorithm = args[1]
    temp_files = []
    process_message = await send_process_message(message)

    try:
        async with aiohttp.ClientSession() as session:
            for i in range(3):
                file = await generate_flowchart(session, algorithm, i + 1)
                if file:
                    temp_files.append(file)

        await send_flowcharts(message, temp_files)
        await process_message.delete()

    except Exception:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑...")
    finally:
        await delete_temp_files(temp_files)

    last_request_time[user_id] = time.time()


async def main() -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
